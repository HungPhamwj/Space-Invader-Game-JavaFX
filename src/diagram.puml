@startuml Space Invader Game Class Diagram

' ==== Global Styling ====
skinparam backgroundColor #FAFAFA
skinparam shadowing false
skinparam linetype ortho
skinparam nodesep 30
skinparam ranksep 40
skinparam roundCorner 10
skinparam padding 10

skinparam class {
  BackgroundColor #FFFFFF
  BorderColor #607D8B
  ArrowColor #455A64
  FontColor #263238
  FontSize 12
  FontStyle bold
  AttributeFontColor #455A64
  AttributeFontSize 10
}

skinparam package {
  BackgroundColor #ECEFF1
  BorderColor #90A4AE
  FontColor #263238
  FontStyle bold
  FontSize 14
}

title <b><size:20>Space Invader Game - Class Diagram</size></b>

' ==== Main Package ====
package "com.example.spaceshootergamejavafx" {

  abstract class GameObject {
      # double x, y
      # double width, height
      + update()
      + render(gc)
      + isDead()
      + getX(), getY()
      + getBounds()
      + getWidth(), getHeight()
  }

  class SpaceShooter {
      + WIDTH, HEIGHT
      + numLives
      - score, bossExists
      - gameObjects, newObjects
      - player, aiController
      + start(primaryStage)
      + spawnEnemy()
      + spawnBossEnemy()
      + spawnPowerUp()
      + updateGameState()
  }

  class Player {
      - speed
      - moveLeft, moveRight
      - moveForward, moveBackward
      - health
      - shieldActive, rapidFireActive
      + update()
      + render(gc)
      + shoot(newObjects)
      + activateShield()
      + activateRapidFire()
  }

  class Enemy {
      - speed, health
      - lastShotTime
      + update()
      + render(gc)
      + shoot(newObjects)
      + takeDamage()
      + isDead()
  }

  class BossEnemy {
      - phase, maxHealth
      - lastBombTime
      + update()
      + shootPattern(newObjects)
      + dropBomb(newObjects)
      + takeDamage()
  }

  class Bullet {
      - speed, isAlive
      + update()
      + render(gc)
      + isDead()
      + hit()
  }

  class EnemyBullet {
      - speed, isAlive
      + update()
      + render(gc)
      + isDead()
      + hit()
  }

  class Bomb {
      - speed, isAlive
      - explosionRadius
      + update()
      + render(gc)
      + isDead()
      + explode(gameObjects)
  }

  class PowerUp {
      - type: PowerUpType
      - isAlive, speed
      + update()
      + render(gc)
      + isDead()
      + getType()
  }

  enum PowerUpType {
      SHIELD
      RAPID_FIRE
      HEALTH
      SCORE_BOOST
  }

  class AIController {
      - player
      - gameObjects, newObjects
      - random, lastShotTime
      + update()
      - tryToShoot()
      - findClosestEnemy()
      - isBombThreatening(bomb)
  }

  class ImageProcessor {
      - imageCache
      + getInstance()
      + getImage(path)
      + getScaledImage(path, width, height)
  }

  ' ==== Inheritance Relationships ====
  GameObject <|-- Player
  GameObject <|-- Enemy
  GameObject <|-- Bullet
  GameObject <|-- EnemyBullet
  GameObject <|-- PowerUp
  GameObject <|-- Bomb
  Enemy <|-- BossEnemy

  ' ==== Compositions / Aggregations ====
  SpaceShooter "1" *-- "*" GameObject : manages
  SpaceShooter "1" *-- "1" Player : controls
  SpaceShooter "1" o-- "0..1" AIController : uses

  ' ==== Dependencies ====
  AIController --> Player : controls
  AIController --> GameObject : monitors

  Player ..> Bullet : creates
  Enemy ..> EnemyBullet : creates
  BossEnemy ..> Bomb : creates
  BossEnemy ..> EnemyBullet : creates

  SpaceShooter ..> PowerUp : creates
  SpaceShooter ..> Enemy : creates
  SpaceShooter ..> BossEnemy : creates

  PowerUp --> PowerUpType : has
}

legend right
  <b>Legend</b>
  |= Symbol |= Relationship |
  | <b>——▷</b> | Inheritance |
  | <b>——▶</b> | Association |
  | <b>o——▶</b> | Aggregation |
  | <b>*——▶</b> | Composition |
  | <b>····▶</b> | Dependency |
endlegend

footer "Space Invader Game - JavaFX Implementation"

@enduml
